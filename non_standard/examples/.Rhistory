setwd('/Volumes/hd500/LifeCon/non_standard/examples')
unlist(tbl[which(tbl$qx==1),1])
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
min(unlist(tbl[which(tbl$qx==1),1]))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
SOAtbl2df.agg <- function(tblnumb, param=list(must.die=FALSE)) {#
	# retrieves aggregate table from SOA website, then converts to data frame#
	# age column is called x, one year death probabilities called qx#
	require(XML)#
	out <- NULL#
	url <- paste("http://mort.soa.org/data/t",tblnumb,".xml",sep="")#
	tempxml <- xmlParse(url)#
	lhi <- xmlToList(tempxml)#
	lhi2 <- lhi[2]$Table$Values$Axis#
	dum2 <- function(.obj, i) {#
		out2 <- list()#
		temp1 <- .obj[i]$Y#
		out2$x  <- as.numeric(temp1$.attrs)#
		out2$qx <- as.numeric(temp1$text)#
		return(out2)#
	}#
	indecies <- 1:length(lhi2)#
	myMorArgs <- list(.obj=lhi2)#
	out <- data.frame(t(mapply(dum2, i=indecies, MoreArgs=myMorArgs)))#
	if(param$must.die==TRUE){ # sets the last qx equal to 1#
		if(out[length(out[,1]),2]!=1){#
			out[length(out[,1]),2] <- 1#
		}#
	}#
	cust.att.agg <- function(tbl, ...) {#
		attributes(tbl)$row.names <- paste(tbl$x)#
		ltemp <- list()#
		ltemp$age.min <- min(unlist(tbl$x))#
		ltemp$age.max <- max(unlist(tbl$x))#
		ltemp$omega <- min(unlist(tbl[which(tbl$qx==1),1]))#
		ltemp$ContentClassification <- lhi$ContentClassification#
		attributes(tbl) <- append(attributes(tbl), ltemp)#
	}#
	attributes(out) <- cust.att.agg(out)#
	return(out)#
}#
#
tbl <- SOAtbl2df.agg(1585)#
tbl
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
attributes(tbl)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
parse("tbl")
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
eval("tbl")
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
parse("tbl")
help(parse)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
parse(text="tbl")
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
print(parse(text="tbl"))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
parse(text="print(tbl)")
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
eval(text="print(tbl)")
help(eval)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
eval(parse(text="print(tbl)"))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
eval(parse(text="tbl"))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
pol.mort <- "tbl"
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
attributes(tbl)$omega
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
paste("attributes(",pol.mort,")$omega",sep="")
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
is.character("ou")
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
.evaltxt <- function(txt) {#
	# evaluates arbitrary code as text, could be dangerous#
	# useful when you need to iterate over a list of strings#
	if(is.character(txt)){#
		eval(parse(text=txt))#
	}#
}
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
.evaltxt(paste("attributes(",pol.mort,")$omega",sep=""))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
pol.omega <- .evaltxt(paste("attributes(",pol.mort,")$omega",sep=""))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
is.na(NA)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
tbl["99",2] <- .1
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
min(unlist(tbl[which(tbl$qx==1),1]))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
temp <- min(unlist(tbl[which(tbl$qx==1),1]))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
temp
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
pol.term <- ifelse(is.na(pol.term),max(0,pol.omega-iss.age),pol.term)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
inf
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
Inf
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
5<Inf
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
tbl["99",2] <- 1
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
get.qs.agg(.evaltxt(pol.mort), 27, 37)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
ceiling(cur.age+cur.term)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
cur.age <- iss.age + cur.iss.elapse
ceiling(cur.age+cur.term)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
get.qs.agg(.evaltxt(pol.mort), floor(cur.age), ceiling(cur.age+cur.term))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
get.xs.agg <- function(obj, my.from, my.to=my.from, my.by=1, param=list(too.young="error",too.old="error")) {#
	# return a vector of death probabilities from an aggregate mortality table#
	# from the SOA#
	# TODO: too old and too young error handling#
	# options should be cf, 0, 1#
	ages <- seq(my.from, my.to, my.by)#
	out <- numeric(length(ages))#
	dum <- function(age, .obj) {#
		.obj[which(.obj$x==age),1] # only change from get.qs.agg here#
	}#
	out <- unlist(mapply(dum, age=ages, MoreArgs=list(.obj=obj)))#
	return(out)#
}
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
get.xs.agg(.evaltxt(pol.mort), floor(cur.age), ceiling(cur.age+cur.term))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
get.qs.agg(.evaltxt(pol.mort), floor(cur.age), ceiling(cur.age+cur.term))#
get.xs.agg(.evaltxt(pol.mort), floor(cur.age), ceiling(cur.age+cur.term))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
get.qs.agg(.evaltxt(pol.mort), floor(cur.age), ceiling(cur.age+Inf))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
# source("/Volumes/amy/LifeCon/R/Actuarial.R")#
# #
# # Profit test example from Actuarial Mathematics for Life Contingent Risks,#
# # section 11.2#
# #
# .ones <- function(temp) {as.array(rep(1, length(temp)))}#
# #
# InsFactors <- function(q, i, end) {#
# 	# insurance factors#
# 	# set end=0 for term, =1 for whole life or endowment insurance#
# 	out <- BLFOR(q/(1+i), (1-q)/(1+i), end)#
# 	return(out)#
# }#
# #
# IAFactors <- function(q, i, end) {#
# 	# immediate annuity factors#
# 	out <- BLFOR(.ones(q), (1-q)/(1+i), end)#
# 	return(out)#
# }#
# #
# #
# Benefits <- list()#
# Benefits$death <- function(x=0, t=0, ...) {10^5}#
# Benefits#
# #
# ReserveBasis <- list()#
# ReserveBasis$interest <- function(t=0, ...) {0.04}#
# ReserveBasis$qxt <- seq(0.011, 0.020, 0.001)#
# ReserveBasis#
# #
# # Reserve factors#
# ResInsFactors <- InsFactors(q=ReserveBasis$qxt, i=ReserveBasis$interest(),#
# 							end=0)#
# ResInsFactors#
# ResIAFactors <- IAFactors(q=ReserveBasis$qxt, i=ReserveBasis$interest(),#
# 							end=0)#
# ResIAFactors#
# ResBenPrem <- Benefits$death()*ResInsFactors[1]/ResIAFactors[1]#
# ResBenPrem # matches the book to two decimal places#
# #
# ResPP <- ResInsFactors*Benefits$death() - ResBenPrem*ResIAFactors#
# ResPP # matches the book again#
# #
# ExperienceBasis <- list()#
# ExperienceBasis$interest <- function(time=0, ...) {0.055}#
# ExperienceBasis$InitExpense <- function(t=0, Premium=0, ...) {#
# 	if(t==0) 400 + Premium*0.20 else 0#
# }#
# ExperienceBasis$RenewalExpense <- function(t, Premium=0, ...) {Premium*0.035}#
# #
# ExperienceBasis$Expense <- function(time, Premium=0) {#
# 	out <- rep(NA, length(time))#
# 	for (j in 1:length(time)) {#
# 		t <- time[j]#
# 		if(j==1) {#
# 			out[j] <- ExperienceBasis$InitExpense(t=t, Premium=Premium)#
# 		}#
# 		if(j==2) {#
# 			out[j] <- 0#
# 		}#
# 		if(j>2.5) {#
# 			out[j] <- ExperienceBasis$RenewalExpense(t=t, Premium=Premium)#
# 		}#
# 	}#
# 	return(out)#
# }#
# ExperienceBasis$qx.tm1 <- function(x=0, time=0, ...) {#
# 	out< rep(NA, length(time)-1)#
# 	for (j in 1:length(out)) {#
# 		t <- time[j]#
# 		if(t==0) {#
# 			out[j] <- NA#
# 			} else {#
# 				out[j] <- 0.010 + 0.001*(t-1)#
# 		}#
# 	}#
# 	return(out)#
# }#
# #
# ModeledPoints <- list()#
# ModeledPoints$n <- 1 # nominal number of policies#
# ModeledPoints$AgeAtEntry <- 60#
# ModeledPoints$type <- "TermLife"#
# ModeledPoints$Term <- 10#
# ModeledPoints$DeferralPeriod <- 0#
# GrossPremPP <- 1500#
# #
# time <- seq(0,10,1)#
# time#
# #
# cf.data <- data.frame(time)#
# cf.data$Res.PPtm1 <- c(NA, ResPP)#
# cf.data$Prem.PPtm1 <- c(NA, rep(GrossPremPP, length(cf.data$time)-1))#
# cf.data$Expense.PPtm1 <- ExperienceBasis$Expense(time=cf.data$time, #
# 	Premium=GrossPremPP)#
# cf.data$Interest.PPtm1.t <- (cf.data$Res.PPtm1 + cf.data$Prem.PPtm1 - cf.data$Expense.PPtm1) * ExperienceBasis$interest()#
# cf.data$DeathBen.PPtm1.t <- c(NA, Benefits$death()*ExperienceBasis$qx.tm1(time=cf.data$time))#
# cf.data$Res.PPtm1.t <- c(NA, ResPP[2:length(ResPP)]*(1 - ExperienceBasis$qx.tm1(time=cf.data$time)))#
# cf.data#
#
########
# 2014-04-13#
source("/Volumes/amy/LifeCon/R/Actuarial.R")#
#
# Profit test example from Actuarial Mathematics for Life Contingent Risks,#
# section 11.2#
#
.ones <- function(temp) {as.array(rep(1, length(temp)))}#
#
InsFactors <- function(q, i, end) {#
	# insurance factors#
	# set end=0 for term, =1 for whole life or endowment insurance#
	out <- BLFOR(q/(1+i), (1-q)/(1+i), end)#
	return(out)#
}#
#
IAFactors <- function(q, i, end) {#
	# immediate annuity factors#
	out <- BLFOR(.ones(q), (1-q)/(1+i), end)#
	return(out)#
}#
#
time <- seq(0,10,1)#
#
Benefits <- list()#
Benefits$death <- function(x=0, t=0, ...) {10^5}#
Benefits#
#
ReserveBasis <- list()#
ReserveBasis$interest <- function(t=0, ...) {0.04}#
ReserveBasis$qxt <- seq(0.011, 0.020, 0.001)#
ReserveBasis#
#
# Reserve factors#
ResInsFactors <- InsFactors(q=ReserveBasis$qxt, i=ReserveBasis$interest(),#
							end=0)#
ResInsFactors#
ResIAFactors <- IAFactors(q=ReserveBasis$qxt, i=ReserveBasis$interest(),#
							end=0)#
ResIAFactors#
ResBenPrem <- Benefits$death()*ResInsFactors[1]/ResIAFactors[1]#
ResBenPrem # matches the book to two decimal places#
#
ResPPtm1 <- c(ResInsFactors*Benefits$death() - ResBenPrem*ResIAFactors,0)#
ResPPtm1 # matches the book again#
length(ResPPtm1)#
#
gp <- 1500#
Expense.init <- function(prem) {400 + 0.20*prem}#
Expense.renew <- function(prem) {0.035*prem}#
exp.qxt <- function(t) {0.01 + 0.001*t}#
exp.int <- 0.055#
#
navec <- rep(NA, length(time))#
cf.data <- data.frame(time,#
	ResPPtm1=navec,#
	PremPPtm1=navec,#
	InitExpensePP=navec,#
	RenewExpensePPtm1=navec,#
	InvIncPPtm1.t=navec,#
	DeathBenPPtm1.t=navec,#
	ResPPtm1.t=navec,#
	PrPPtm1.t=navec#
)#
j=2#
for (j in 1:length(cf.data$time)) {#
	t <- cf.data$time[j]#
	temp <- cf.data[which(cf.data$time==t),]#
	if(t==0) {#
		temp$InitExpensePP <- Expense.init(prem=gp)#
		} else {#
			temp$ResPPtm1 <- ResPPtm1[t]#
			temp$PremPPtm1 <- gp#
			temp$InitExpensePP <- 0#
			ifelse(j==2,0,temp$RenewExpensePPtm1 <- Expense.renew(prem=gp))#
			temp$InvIncPPtm1.t <- (#
				temp$ResPPtm1 + #
				temp$PremPPtm1 -#
				temp$RenewExpensePPtm1#
				) * exp.int#
			temp$DeathBenPPtm1.t <- Benefits$death()*exp.qxt(t-1)#
			temp$ResPPtm1.t <- ResPPtm1[t+1]*(1 - exp.qxt(t-1))#
			temp$PrPPtm1.t <- (#
				temp$ResPPtm1 + #
				temp$PremPPtm1 -#
				temp$RenewExpensePPtm1 +#
				temp$InvIncPPtm1.t -#
				temp$DeathBenPPtm1.t -#
				temp$ResPPtm1.t#
				)#
		}#
	cf.data[which(cf.data$time==t),] <- temp#
}#
#
cf.data
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
PrPPtm1.t <- function(df) {#
	times <- df$time[3:length(df$time)]#
	out0 <- numeric(length$times)#
	dum <- function(my.t, my.df) {#
		out1 <- my.df$ResPPtm1 + #
				my.df$PremPPtm1 -#
				my.df$RenewExpensePPtm1 +#
				my.df$InvIncPPtm1.t -#
				my.df$DeathBenPPtm1.t -#
				my.df$ResPPtm1.t#
		return(out1)#
	}#
	out0 <- unlist(mapply(dum, times, MoreArgs=list(my.df=df)))#
	return(out0)#
}#
PrPPtm1.t(cf.data)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
PrPPtm1.t <- function(df) {#
	times <- df$time[3:length(df$time)]#
	out0 <- numeric(length(times))#
	dum <- function(my.t, my.df) {#
		out1 <- my.df$ResPPtm1 + #
				my.df$PremPPtm1 -#
				my.df$RenewExpensePPtm1 +#
				my.df$InvIncPPtm1.t -#
				my.df$DeathBenPPtm1.t -#
				my.df$ResPPtm1.t#
		return(out1)#
	}#
	out0 <- unlist(mapply(dum, times, MoreArgs=list(my.df=df)))#
	return(out0)#
}#
PrPPtm1.t(cf.data)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
df$time
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
df <- cf.data
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
df$time
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
length(df$time)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
df$time[3:length(df$time)]
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
PrPPtm1.t <- function(df) {#
	times <- df$time[3:length(df$time)]#
	out0 <- numeric(length(times))#
	dum <- function(my.t, my.df) {#
		temp <- my.df[which(my.df$time==my.t),]#
		out1 <- temp$ResPPtm1 + #
				temp$PremPPtm1 -#
				temp$RenewExpensePPtm1 +#
				temp$InvIncPPtm1.t -#
				temp$DeathBenPPtm1.t -#
				temp$ResPPtm1.t#
		return(out1)#
	}#
	out0 <- unlist(mapply(dum, my.t=times, MoreArgs=list(my.df=df)))#
	return(out0)#
}#
PrPPtm1.t(cf.data)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
PrPPtm1.t <- function(df) {#
	times <- df$time[3:length(df$time)]#
	temp0 <- numeric(length(times))#
	dum <- function(my.t, my.df) {#
		temp <- my.df[which(my.df$time==my.t),]#
		out1 <- temp$ResPPtm1 + #
				temp$PremPPtm1 -#
				temp$RenewExpensePPtm1 +#
				temp$InvIncPPtm1.t -#
				temp$DeathBenPPtm1.t -#
				temp$ResPPtm1.t#
		return(out1)#
	}#
	temp0 <- unlist(mapply(dum, my.t=times, MoreArgs=list(my.df=df)))#
	out0 <- data.frame(times, Pr_t=temp0)#
	return(out0)#
}#
PrPPtm1.t(cf.data)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
times <- 1:2#
spot.rates <- c(.04, .06) # continuously compounded#
pmnts <- c(100, 200)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
times <- 1:2#
spot.rates <- c(.04, .06) # continuously compounded#
pmnts <- c(100, 200)#
#
pv <- function(times, spot.rates, pmnts) {#
	sum(pmnts*exp(-times*spot.rates))#
}#
pv(times, spot.rates, pmnts)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
library(Runit)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
library(RUnit)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
checkequals(pv(times, spot.rates, pmnts), 100*exp(-.04)+ 200*exp(-.06*2))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
checkequal(pv(times, spot.rates, pmnts), 100*exp(-.04)+ 200*exp(-.06*2))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
checkEquals(pv(times, spot.rates, pmnts), 100*exp(-.04)+ 200*exp(-.06*2))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
pv.spot <- function(times, spot.rates, pmnts) {#
	sum(pmnts*exp(-times*spot.rates))#
}
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
checkEquals(pv.spot(times, spot.rates, pmnts), 100*exp(-.04)+ 200*exp(-.06*2))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
pv.yield <- function(times, yield, pmnts) {#
	sum(pmnts*exp(-times*yield))#
}
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
help(solve)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
help(nlm)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
sqtomin <- function(y, .times=times, .spot.rates=spot.rates, .pmnts=pmnts) {#
	(pv.yield(times=.times, yield=y, pmnts=.pmnts) - #
		pv.spot(times=.times, spot.rates=.spot.rates, pmnts=.pmnts))^2#
}
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
nlm(f=sqtomin(y), p=.04)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
sqtomin <- function(y, .times=times, .spot.rates=spot.rates, .pmnts=pmnts) {#
	(pv.yield(times=.times, yield=y, pmnts=.pmnts) - #
		pv.spot(times=.times, spot.rates=.spot.rates, pmnts=.pmnts))^2#
}
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
nlm(f=sqtomin, p=.04)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
low <- min(spot.rates)#
high <- max(spot.rates)#
low#
high
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
my.pv <- pv.spot(times, spot.rates, pmnts)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
my.pv
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
help(log)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
sum.pmnts <- sum(pmnts)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
sum.pmnts
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
temp.numerator <- log(my.pv/sum.pmnts)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
temp.numerator
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
temp.denom <- function(rate.k, ...) {#
	log(pv.yield(times, yield=rate.k, pmnts)/sum.pmnts)#
}
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
temp.denom(.05)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
get.next.rate <- function(rate.k, ...) {#
	temp.numerator * rate.k / temp.denom(rate.k)#
}
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
get.next.rate(.04)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
tol <- 1e-5
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
y.low <- min(spot.rates)#
y.high <- max(spot.rates)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
cur.low <- min(spot.rates)#
cur.high <- max(spot.rates)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
max.iterations <- 10e4
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
max.iterations
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
max.iterations <- 1e4#
max.iterations
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
abs(-4)
help(loop)
help(until)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
mean(cur.low,cur.high)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
cur.high
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
out <- mean(c(cur.low,cur.high))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
out
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
cur.iter <- 0#
while(all(abs(cur.low-cur.high)>tol, cur.iter<max.iterations)){#
	cur.low <- get.next.rate(rate.k=cur.low)#
	cur.high <- get.next.rate(rate.k=cur.high)#
	cur.iter <- cur.iter + 1#
}#
out <- mean(c(cur.low,cur.high))#
out
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
nlm(f=sqtomin, p=.04)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
cur.iter
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
get.irr.gerber <- function(times, spot.rates, pmnts, tol=1e-5, max.iterations=1e4) {#
	# calculates internal rate of return#
	# based on Gerber, "Life Insurance Mathematics", 3rd edition, page 13#
	out <- numeric(1)#
	cur.low <- min(spot.rates)#
	cur.high <- max(spot.rates)#
	# some helper functions, they could be pulled out to use for other things#
		pv.spot <- function(times, spot.rates, pmnts) {#
			sum(pmnts*exp(-times*spot.rates))#
		}#
		pv.yield <- function(times, yield, pmnts) {#
			sum(pmnts*exp(-times*yield))#
		}#
		temp.denom <- function(rate.k, ...) {#
			log(pv.yield(times, yield=rate.k, pmnts)/sum.pmnts)#
		}#
		get.next.rate <- function(rate.k, ...) {#
			temp.numerator * rate.k / temp.denom(rate.k)#
		}#
	# setup constants#
		my.pv <- pv.spot(times, spot.rates, pmnts)#
		sum.pmnts <- sum(pmnts)#
		temp.numerator <- log(my.pv/sum.pmnts)#
		cur.iter <- 0#
	# run interation#
	while(all(abs(cur.low-cur.high)>tol, cur.iter<max.iterations)){#
		cur.low <- get.next.rate(rate.k=cur.low)#
		cur.high <- get.next.rate(rate.k=cur.high)#
		cur.iter <- cur.iter + 1#
	}#
	out <- mean(c(cur.low,cur.high))#
	return(out)#
}#
#
times <- 1:2#
spot.rates <- c(.04, .06) # continuously compounded#
pmnts <- c(100, 200)#
get.irr.gerber(times, spot.rates, pmnts)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
# validate#
sqtomin <- function(y, .times=times, .spot.rates=spot.rates, .pmnts=pmnts) {#
	(pv.yield(times=.times, yield=y, pmnts=.pmnts) - #
		pv.spot(times=.times, spot.rates=.spot.rates, pmnts=.pmnts))^2#
}#
#
nlm(f=sqtomin, p=.04)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
nlm(f=sqtomin, p=.04)$estimate
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
gerber.est <- get.irr.gerber(times, spot.rates, pmnts)#
gerber.est
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
nml.est <- nlm(f=sqtomin, p=.04)$estimate
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
gerber.est - nlm.est
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
nml.est <- nlm(f=sqtomin, p=.04)$estimate#
gerber.est - nlm.est
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
nlm.est <- nlm(f=sqtomin, p=.04)$estimate#
gerber.est - nlm.est
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
times <- 1:361
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
spot.rates <- .001 + .01*sqrt(times)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
set.seed(42)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
runif(2)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
runif(10)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
pmnts <- 100*runif(length(times))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
library(rbenchmark)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
times <- 1:2#
spot.rates <- c(.04, .06) # continuously compounded#
pmnts <- c(100, 200)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
get.irr.nlm(times, spot.rates, pmnts)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
get.irr.nlm <- function(times, spot.rates, pmnts) {#
	# some helper functions, they could be pulled out to use for other things#
		pv.spot <- function(times, spot.rates, pmnts) {#
			sum(pmnts*exp(-times*spot.rates))#
		}#
		pv.yield <- function(times, yield, pmnts) {#
			sum(pmnts*exp(-times*yield))#
		}#
		sqtomin <- function(y, .times=times, .spot.rates=spot.rates, .pmnts=pmnts) {#
			(pv.yield(times=.times, yield=y, pmnts=.pmnts) - #
				pv.spot(times=.times, spot.rates=.spot.rates, pmnts=.pmnts))^2#
		}#
	guess <- mean(spot.rates)#
	return(nlm(f=sqtomin, p=guess)$estimate)#
}
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
get.irr.nlm(times, spot.rates, pmnts)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
benchmark(get.irr.gerber(times, spot.rates, pmnts), get.irr.nlm(times, spot.rates, pmnts))
benchmark(get.irr.gerber(times, spot.rates, pmnts), get.irr.nlm(times, spot.rates, pmnts))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
times <- 1:361#
spot.rates <- .001 + .01*sqrt(times)#
set.seed(42)#
pmnts <- 100*runif(length(times))
benchmark(get.irr.gerber(times, spot.rates, pmnts), get.irr.nlm(times, spot.rates, pmnts))
warnings()
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
times <- 1:361#
spot.rates <- .001 + .01*sqrt(times)#
pmnts <- 100*runif(length(times))#
benchmark(get.irr.gerber(times, spot.rates, pmnts), get.irr.nlm(times, spot.rates, pmnts))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
for (i in 1:10) {#
	times <- 1:361#
	spot.rates <- .001 + .01*sqrt(times)*runif(length(times))#
	pmnts <- 100*runif(length(times))#
	benchmark(get.irr.gerber(times, spot.rates, pmnts), get.irr.nlm(times, spot.rates, pmnts))#
}
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
times <- 1:361#
spot.rates <- .001 + .01*sqrt(times)*runif(length(times))#
pmnts <- 100*runif(length(times))#
benchmark(get.irr.gerber(times, spot.rates, pmnts), get.irr.nlm(times, spot.rates, pmnts))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
spot.rates <- .001 + .01*sqrt(times)#
pmnts <- 100*runif(length(times))#
benchmark(get.irr.gerber(times, spot.rates, pmnts), get.irr.nlm(times, spot.rates, pmnts))
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
benchmark(get.irr.gerber(times, spot.rates, pmnts), get.irr.nlm(times, spot.rates, pmnts))[2,]$relative
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
trials <- 10#
res <- numeric(trials)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
trials <- 10#
res <- numeric(trials)#
for (i in 1:trials) {#
	times <- 1:361#
	spot.rates <- .001 + .01*sqrt(times)#
	pmnts <- 100*runif(length(times))#
	res[i] <- benchmark(get.irr.gerber(times, spot.rates, pmnts), get.irr.nlm(times, spot.rates, pmnts))[2,]$relative#
}#
mean(res)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
trials <- 50#
res <- numeric(trials)#
for (i in 1:trials) {#
	times <- 1:361#
	spot.rates <- .001 + .01*sqrt(times)#
	pmnts <- 100*runif(length(times))#
	res[i] <- benchmark(get.irr.gerber(times, spot.rates, pmnts), get.irr.nlm(times, spot.rates, pmnts))[2,]$relative#
}#
mean(res)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
summary(res)
setwd('/Volumes/hd500/LifeCon/non_standard/examples')
trials <- 100#
res <- numeric(trials)#
for (i in 1:trials) {#
	times <- 1:361#
	spot.rates <- .001 + .01*sqrt(times)#
	pmnts <- 100*runif(length(times))#
	res[i] <- benchmark(get.irr.gerber(times, spot.rates, pmnts), get.irr.nlm(times, spot.rates, pmnts))[2,]$relative#
}#
summary(res)#
# a pretty decent speed up, I'm seeing an average of about 4.5 times faster
